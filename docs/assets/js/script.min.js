let CLIENT_DATA_STORAGE_DATABASE;window.indexedDB=window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB,window.IDBTransaction=window.IDBTransaction||window.webkitIDBTransaction||window.msIDBTransaction,window.IDBKeyRange=window.IDBKeyRange||window.webkitIDBKeyRange||window.msIDBKeyRange;const CLIENT_DATA_STORAGE_SYSTEM={collection:"ClientDB",tryConnection:1,timeoutConnection:5,systemKey:"__system__",storageKey:"__storage__",tabId:e=>`TID${sessionStorage.tabID?sessionStorage.tabID:sessionStorage.tabID=Math.random()}#${e}`,CDBFunctionRunner:e=>{CLIENT_DATA_STORAGE_DATABASE?e():CLIENT_DATA_STORAGE_SYSTEM.tryConnection<=CLIENT_DATA_STORAGE_SYSTEM.timeoutConnection?(CLIENT_DATA_STORAGE_SYSTEM.tryConnection=CLIENT_DATA_STORAGE_SYSTEM.tryConnection+1,setTimeout((()=>{CLIENT_DATA_STORAGE_SYSTEM.CDBFunctionRunner(e)}),250)):console.error("connection timeot")}},CLIENT_DATA_STORAGE_CONFIG={where:[]},CDatabase={init:(e=null)=>new Promise((o=>{e&&"function"==typeof e&&(window.indexedDB||(e("Browser tidak support IndexedDB versi stabil"),o("error")));const t=window.indexedDB.open(CLIENT_DATA_STORAGE_SYSTEM.collection);t.onsuccess=function(e){CLIENT_DATA_STORAGE_DATABASE=t.result,o("success")},t.onerror=function(e){console.error("Error Initializing Client Database",e),o("error")},t.onupgradeneeded=function(e){const o=e.target.result,t=o.createObjectStore(CLIENT_DATA_STORAGE_SYSTEM.systemKey,{keyPath:"id",autoIncrement:!1});o.createObjectStore(CLIENT_DATA_STORAGE_SYSTEM.storageKey,{keyPath:"id",autoIncrement:!1});t.add({id:"version",value:1})}})),upgrade:(e=[],o)=>new Promise((async t=>{await CDatabase.init();const n=(await CDatabase.get(CLIENT_DATA_STORAGE_SYSTEM.systemKey,"version")).value+1;CLIENT_DATA_STORAGE_DATABASE.close();const a=window.indexedDB.open("ClientDB",n);a.onsuccess=function(e){CLIENT_DATA_STORAGE_DATABASE=a.result,CDatabase.put(CLIENT_DATA_STORAGE_SYSTEM.systemKey,{id:"version",value:n}),o&&"function"==typeof o&&o(),t("success")},a.onerror=function(e){console.error("Upgrade Error",e)},a.onupgradeneeded=function(o){const t=o.target.result;for(const o of e)t.createObjectStore(o.collection,{keyPath:o.key,autoIncrement:o.autoIncrement})}})),where:(e,o,t)=>{"object"!=typeof e?"string"!=typeof e||(CLIENT_DATA_STORAGE_CONFIG.where=[...CLIENT_DATA_STORAGE_CONFIG.where,[e,o,t]]):CLIENT_DATA_STORAGE_CONFIG.where=[...CLIENT_DATA_STORAGE_CONFIG.where,e]},add:(e,o,t)=>{CLIENT_DATA_STORAGE_SYSTEM.CDBFunctionRunner((()=>{const n=CLIENT_DATA_STORAGE_DATABASE.transaction([e],"readwrite").objectStore(e).add(o);n.onsuccess=e=>{t&&"function"==typeof t&&t()},n.onerror=o=>console.error("CDB Error: Add data to "+e)}))},put:(e,o,t)=>{CLIENT_DATA_STORAGE_SYSTEM.CDBFunctionRunner((()=>{const n=CLIENT_DATA_STORAGE_DATABASE.transaction([e],"readwrite").objectStore(e).put(o);n.onsuccess=e=>{t&&"function"==typeof t&&t()},n.onerror=o=>console.error("CDB Error : Put data to "+e)}))},get:(e,o,t)=>new Promise((n=>{CLIENT_DATA_STORAGE_SYSTEM.CDBFunctionRunner((()=>{try{let a=null;if(a=o&&"function"!=typeof o?CLIENT_DATA_STORAGE_DATABASE.transaction(e).objectStore(e).get(o):CLIENT_DATA_STORAGE_DATABASE.transaction(e).objectStore(e).getAll(),!a)throw"No object generated";a.onsuccess=()=>{let e=a.result;if(CLIENT_DATA_STORAGE_CONFIG.where&&"object"==typeof CLIENT_DATA_STORAGE_CONFIG.where&&CLIENT_DATA_STORAGE_CONFIG.where.length){let o=[];for(const e of a.result)for(const t of CLIENT_DATA_STORAGE_CONFIG.where)switch(t[1]){case"==":e[t[0]]==t[2]&&(o=[...o,e]);break;case"<":e[t[0]]<t[2]&&(o=[...o,e]);break;case"<=":e[t[0]]<=t[2]&&(o=[...o,e]);break;case">":e[t[0]]>t[2]&&(o=[...o,e]);break;case">=":e[t[0]]>=t[2]&&(o=[...o,e])}e=o}o&&"string"==typeof o&&"function"==typeof t?t(e):o&&"function"==typeof o&&o(e),CLIENT_DATA_STORAGE_CONFIG.where=[],n(e)},a.onerror=e=>{n(null)}}catch(e){n(null)}}))})),getKeys:e=>new Promise((o=>{CLIENT_DATA_STORAGE_SYSTEM.CDBFunctionRunner((()=>{const t=CLIENT_DATA_STORAGE_DATABASE.transaction(e).objectStore(e).getAllKeys();t.onsuccess=()=>o(t.result),t.onerror=e=>o(e)}))})),count:e=>new Promise((o=>{CLIENT_DATA_STORAGE_SYSTEM.CDBFunctionRunner((()=>{const t=CLIENT_DATA_STORAGE_DATABASE.transaction([e],"readwrite").objectStore(e).count();t.onsuccess=e=>o(t.result)}))})),delete:(e,o,t)=>{CLIENT_DATA_STORAGE_SYSTEM.CDBFunctionRunner((()=>{CLIENT_DATA_STORAGE_DATABASE.transaction([e],"readwrite").objectStore(e).delete(o).onsuccess=e=>{t&&"function"==typeof t&&t()}}))},clear:(e,o)=>{CLIENT_DATA_STORAGE_SYSTEM.CDBFunctionRunner((()=>{CLIENT_DATA_STORAGE_DATABASE.transaction([e],"readwrite").objectStore(e).clear().onsuccess=e=>{o&&"function"==typeof o&&o()}}))}},CStorage={addGlobal:async(e,o,t)=>{CDatabase.add(CLIENT_DATA_STORAGE_SYSTEM.storageKey,{id:e,data:o,location:{protocol:window.location.protocol,host:window.location.host,pathname:window.location.pathname,search:window.location.search},time:Date.now()},t)},addLocal:async(e,o,t)=>{CDatabase.add(CLIENT_DATA_STORAGE_SYSTEM.storageKey,{id:CLIENT_DATA_STORAGE_SYSTEM.tabId(e),data:o,location:{protocol:window.location.protocol,host:window.location.host,pathname:window.location.pathname,search:window.location.search},time:Date.now()},t)},getGlobal:(e,o)=>new Promise((async t=>{t(await CDatabase.get(CLIENT_DATA_STORAGE_SYSTEM.storageKey,e,o))})),getLocal:(e,o)=>new Promise((async t=>{t(await CDatabase.get(CLIENT_DATA_STORAGE_SYSTEM.storageKey,CLIENT_DATA_STORAGE_SYSTEM.tabId(e),o))})),putGlobal:async(e,o,t)=>{CDatabase.put(CLIENT_DATA_STORAGE_SYSTEM.storageKey,{id:e,data:o,location:{protocol:window.location.protocol,host:window.location.host,pathname:window.location.pathname,search:window.location.search},time:Date.now()},t)},putLocal:async(e,o,t)=>{CDatabase.put(CLIENT_DATA_STORAGE_SYSTEM.storageKey,{id:CLIENT_DATA_STORAGE_SYSTEM.tabId(e),data:o,location:{protocol:window.location.protocol,host:window.location.host,pathname:window.location.pathname,search:window.location.search},time:Date.now()},t)},getAllKey:()=>new Promise((async e=>{const o=CDatabase.getKeys(CLIENT_DATA_STORAGE_SYSTEM.storageKey);o.onsuccess=()=>e(o.result),o.onerror=e=>console.error(`Error to get all data: ${e}`)})),deleteGlobal:(e,o)=>{CDatabase.delete(CLIENT_DATA_STORAGE_SYSTEM.storageKey,e,o)},deleteLocal:(e,o)=>{CDatabase.delete(CLIENT_DATA_STORAGE_SYSTEM.storageKey,CLIENT_DATA_STORAGE_SYSTEM.tabId(e),o)},clearGlobal:async e=>new Promise((async o=>{try{const t=await CDatabase.getKeys(CLIENT_DATA_STORAGE_SYSTEM.storageKey);for(const e of t){"TID0."!==e.slice(0,5)&&CDatabase.delete(CLIENT_DATA_STORAGE_SYSTEM.storageKey,e)}e&&"function"==typeof e&&e(),o()}catch(e){console.error("storage clear global storage data error")}})),clearLocal:async e=>new Promise((async o=>{try{const t=await CDatabase.getKeys(CLIENT_DATA_STORAGE_SYSTEM.storageKey);for(const e of t){"TID0."===e.slice(0,5)&&CDatabase.delete(CLIENT_DATA_STORAGE_SYSTEM.storageKey,e)}e&&"function"==typeof e&&e(),o()}catch(e){console.error("storage clear local storage data error")}})),clearStorage:e=>{CDatabase.clear(CLIENT_DATA_STORAGE_SYSTEM.storageKey,e)}};(async()=>{await CDatabase.init()})();